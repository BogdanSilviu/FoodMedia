@page
@model FeedModel
@{
	ViewData["Title"] = "Feed";
}

<div class="container-fluid mt-4">
	<div class="row">

        <!-- LEFT COLUMN: Following -->
        <div class="col-md-3 d-none d-md-block">
            <div class="position-sticky" style="top: 20px;">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-secondary text-white">
                        Following
                    </div>
                    <div class="list-group list-group-flush">
                        @if (User.Identity?.IsAuthenticated != true)
                        {
                            <div class="list-group-item">
                                You are not logged in. Please log in to see who you follow.
                            </div>
                        }
                        else if (Model.ActiveFollowees == null || !Model.ActiveFollowees.Any())
                        {
                            <div class="list-group-item">
                                You are not following anyone yet.
                            </div>
                        }
                        else
                        {
                            <partial name="_FollowList" model="Model.ActiveFollowees" />
                        }
                    </div>
                </div>
            </div>
        </div>



		<!-- MIDDLE COLUMN: Feed -->
		<div class="col-md-6">
			<div id="feed-container">
				@if (!Model.FeedPosts.Any())
				{
					<div class="alert alert-secondary text-center">
						No posts to display.
					</div>
				}
				else
				{
					@foreach (var post in Model.FeedPosts)
					{
						<partial name="_PostCard" model="post" />
					}
				}
			</div>

			@if (Model.HasMorePosts)
			{
				<div class="text-center my-3">
					<button id="load-more" class="btn btn-outline-primary btn-lg">Load More</button>
				</div>
			}
		</div>

		<!-- RIGHT COLUMN: Categories -->
		@if (Model.AvailableCategories?.Any() == true)
		{
			<div class="col-md-3 d-none d-md-block">
				<div class="position-sticky" style="top: 20px;">
					<div class="card shadow-sm mb-4">
						<div class="card-header bg-secondary text-white">
							Categories
						</div>
						<ul class="list-group list-group-flush">
							@foreach (var cat in Model.AvailableCategories)
							{
								<li class="list-group-item">
									<a href="#" class="category-filter text-decoration-none" data-category="@cat.Id">
										@cat.Name
									</a>
								</li>
							}
						</ul>
					</div>
				</div>
			</div>

		}
	</div>
</div>


@section Scripts {
    <script>
        let page = 0;
        let loading = false;
        let hasMorePosts = @Model.HasMorePosts.ToString().ToLower();
        const feedContainer = document.getElementById("feed-container");

        function attachPostEvents(container) {
            // Like buttons
            container.querySelectorAll(".like-btn").forEach(btn => {
                if (!btn.dataset.listenerAttached) {
                    btn.dataset.listenerAttached = true;

                    btn.addEventListener("click", async () => {
                        const postId = btn.dataset.postid;
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                        const res = await fetch(`/Feed?handler=ToggleLike`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": token
                            },
                            body: JSON.stringify({ postId })
                        });

                        const data = await res.json();
                        if (!data.success) return;

                        const likeCount = container.querySelector(`.like-count[data-postid='${postId}']`);
                        if (likeCount) likeCount.innerText = data.likes;

                        // Update button appearance
                        if (data.liked) {
                            btn.classList.remove("btn-outline-primary");
                            btn.classList.add("btn-primary", "text-white");
                            btn.innerHTML = `❤️ Like (<span class="like-count" data-postid="${postId}">${data.likes}</span>)`;
                        } else {
                            btn.classList.remove("btn-primary", "text-white");
                            btn.classList.add("btn-outline-primary");
                            btn.innerHTML = `👍 Like (<span class="like-count" data-postid="${postId}">${data.likes}</span>)`;
                        }
                    });
                }
            });

            // Add comment buttons
            container.querySelectorAll(".add-comment-btn").forEach(btn => {
                if (!btn.dataset.listenerAttached) {
                    btn.dataset.listenerAttached = true;

                    btn.addEventListener("click", async () => {
                        const postId = btn.dataset.postid;
                        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                        const modal = document.getElementById(`commentsModal_${postId}`);
                        const input = modal.querySelector(".comment-input");
                        const content = input.value.trim();
                        if (!content) return;

                        const formData = new URLSearchParams();
                        formData.append("postId", postId);
                        formData.append("content", content);

                        const res = await fetch(`/Feed?handler=AddComment`, {
                            method: "POST",
                            headers: {
                                "RequestVerificationToken": token,
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            body: formData
                        });

                        const data = await res.json();
                        if (!data.success) return;

                        // Update modal
                        const modalList = modal.querySelector(".modal-comment-list");
                        if (modalList) {
                            const li = document.createElement("li");
                            li.classList.add("mb-2");
                            li.innerHTML = `<strong>${data.comment.user}:</strong> ${data.comment.content} <small class="text-muted">(${data.comment.createdAt})</small>`;
                            modalList.appendChild(li);
                        }

                        // Update preview
                        const card = document.getElementById(`post-${postId}`);
                        const previewList = card.querySelector(".preview-comment-list");
                        if (previewList) {
                            previewList.innerHTML = `<li class="small text-muted mb-2">
                                <strong>${data.comment.user}:</strong> ${data.comment.content}
                                <small class="text-muted">(${data.comment.createdAt})</small>
                            </li>`;
                        }

                        // Update "View all comments" button
                        const viewBtn = card.querySelector(`button[data-bs-target='#commentsModal_${postId}']`);
                        if (viewBtn) {
                            const match = viewBtn.textContent.match(/\d+/);
                            const count = match ? parseInt(match[0]) + 1 : 1;
                            viewBtn.textContent = `View all comments (${count})`;
                        }

                        input.value = "";
                    });
                }
            });
        }

        // Initial attachment
        attachPostEvents(feedContainer);

        async function loadPosts() {
            if (!hasMorePosts || loading) return;
            loading = true;

            const res = await fetch(`/Feed?handler=LoadFeed&page=${page}`);
            const html = await res.text();
            if (html.trim().length === 0) {
                hasMorePosts = false;
                loading = false;
                return;
            }

            const tempDiv = document.createElement("div");
            tempDiv.innerHTML = html;
            feedContainer.append(...tempDiv.children);

            attachPostEvents(feedContainer);
            page++;
            loading = false;
        }

        // Load more button
        document.getElementById("load-more")?.addEventListener("click", loadPosts);

        // Infinite scroll
        window.addEventListener("scroll", () => {
            if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200) {
                loadPosts();
            }
        });

        // Category filtering
        document.querySelectorAll(".category-filter").forEach(catLink => {
            catLink.addEventListener("click", async e => {
                e.preventDefault();
                const catId = catLink.dataset.category;
                const res = await fetch(`/Feed?handler=LoadFeed&page=0&categoryId=${catId}`);
                const html = await res.text();
                feedContainer.innerHTML = html;
                page = 1;
                hasMorePosts = true;
                attachPostEvents(feedContainer);
            });
        });
    </script>
}


