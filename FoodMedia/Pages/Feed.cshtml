@page
@model FeedModel
@{
	ViewData["Title"] = "Feed";
}

<div class="container-fluid">
	<div class="row">

		<!-- LEFT COLUMN -->
		@if (User.Identity?.IsAuthenticated == true && Model.ActiveFollowees?.Any() == true)
		{
			<div class="col-md-3 d-none d-md-block">
				<h5>Following</h5>
				<partial name="_FollowList" model="Model.ActiveFollowees" />
			</div>
		}

		<!-- MIDDLE COLUMN -->
		<div class="col-md-6">
			<div id="feed-container">
				@if (!Model.FeedPosts.Any())
				{
					<p class="text-muted">No posts to display.</p>
				}
				else
				{
					foreach (var post in Model.FeedPosts)
					{
						<partial name="_PostCard" model="post" />
					}
				}
			</div>

			@if (Model.HasMorePosts)
			{
				<div class="text-center my-3">
					<button id="load-more" class="btn btn-outline-primary">Load More</button>
				</div>
			}
		</div>

		<!-- RIGHT COLUMN -->
		@if (Model.AvailableCategories?.Any() == true)
		{
			<div class="col-md-3 d-none d-md-block">
				<h5>Categories</h5>
				<ul class="list-group">
					@foreach (var cat in Model.AvailableCategories)
					{
						<li class="list-group-item">
							<a href="#" class="category-filter" data-category="@cat.Id">@cat.Name</a>
						</li>
					}
				</ul>
			</div>
		}
	</div>
</div>

@section Scripts {
	<script>
		let page = 0;
		let loading = false;
		let hasMorePosts = @Model.HasMorePosts.ToString().ToLower();
		const feedContainer = document.getElementById("feed-container");

		// Attach events to all posts in a container
		function attachPostEvents(container) {
			// Like buttons
					container.querySelectorAll(".like-btn").forEach(btn => {
			if (!btn.dataset.listenerAttached) {
				btn.dataset.listenerAttached = true;
				btn.addEventListener("click", async function () {
					const postId = btn.dataset.postid;
					const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

					try {
						const res = await fetch(`/Feed?handler=ToggleLike`, {
							method: "POST",
							headers: {
								"Content-Type": "application/json",
								"RequestVerificationToken": token
							},
							body: JSON.stringify({ postId })
						});

						const data = await res.json();

						if (data.success) {
							// Always set the like count from the server
							const likeCountEl = document.getElementById(`like-count-${postId}`);
							if (likeCountEl) likeCountEl.innerText = data.likes;

							// Update button state
							if (data.liked) {
								btn.classList.add("liked"); // optional CSS class for active like
							} else {
								btn.classList.remove("liked");
							}
						}
					} catch (err) {
						console.error("Error toggling like:", err);
					}
				});
			}
		});


			// Comment buttons
			container.querySelectorAll(".add-comment-btn").forEach(btn => {
				if (!btn.dataset.listenerAttached) {
					btn.dataset.listenerAttached = true;
					btn.addEventListener("click", async () => {
						const postId = btn.dataset.postid;
						const input = container.querySelector(`.comment-input[data-postid='${postId}']`);
						const content = input.value.trim();
						if (!content) return;

								const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
		const formData = new URLSearchParams();
		formData.append("postId", postId);
		formData.append("content", content);

		const res = await fetch(`/Feed?handler=AddComment`, {
			method: "POST",
			headers: {
				"RequestVerificationToken": token,
				"Content-Type": "application/x-www-form-urlencoded"
			},
			body: formData
		});


						const data = await res.json();
						if (data.success) {
							const commentList = document.getElementById(`comment-list-${postId}`);
							const li = document.createElement("li");
							li.classList.add("list-group-item");
							li.innerHTML = `<strong>${data.comment.user}:</strong> ${data.comment.content} <small class="text-muted">(${data.comment.createdAt})</small>`;
							commentList.appendChild(li);
							input.value = "";
						}
					});
				}
			});
		}

		async function loadPosts() {
			if (!hasMorePosts || loading) return;
			loading = true;

			const res = await fetch(`/Feed?handler=LoadFeed&page=${page}`);
			const html = await res.text();
			if (html.trim().length === 0) {
				hasMorePosts = false;
				loading = false;
				return;
			}

			const tempDiv = document.createElement("div");
			tempDiv.innerHTML = html;
			feedContainer.append(...tempDiv.children);

			attachPostEvents(feedContainer);
			page++;
			loading = false;
		}

		// Initial attachment
		attachPostEvents(feedContainer);

		// Load More button
		document.getElementById("load-more")?.addEventListener("click", loadPosts);

		// Infinite scroll
		window.addEventListener("scroll", () => {
			if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200) {
				loadPosts();
			}
		});

		// Category filtering
		document.querySelectorAll(".category-filter").forEach(catLink => {
			catLink.addEventListener("click", async (e) => {
				e.preventDefault();
				const catId = catLink.dataset.category;
				const res = await fetch(`/Feed?handler=LoadFeed&page=0&categoryId=${catId}`);
				const html = await res.text();
				feedContainer.innerHTML = html;
				page = 1;
				hasMorePosts = true;
				attachPostEvents(feedContainer);
			});
		});
	</script>
}


