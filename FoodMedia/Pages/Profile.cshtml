@page
@model ProfileModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery


@{
    ViewData["Title"] = "My Profile";

    bool showCreatePost = ViewData["ShowCreatePostForm"] as bool? ?? false;
    bool showEditProfile = ViewData["ShowEditProfileForm"] as bool? ?? false;
}

<div class="container mt-4">
    <h2>@Model.DisplayName's Profile</h2>
    <p>@Model.Bio</p>

    <div class="mb-4">
        <img src="@Model.ProfilePictureUrl" class="img-thumbnail" style="max-height: 150px;" />
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    <hr />

    <button class="btn btn-primary mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#createPostForm" aria-expanded="false" aria-controls="createPostForm">
        Create New Post
    </button>
    <button class="btn btn-secondary mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#editProfileForm" aria-expanded="false" aria-controls="editProfileForm">
        Edit Profile
    </button>

    <!-- EDIT PROFILE FORM -->
    <div class="collapse @(showEditProfile ? "show" : "")" id="editProfileForm">
        <div class="card card-body">
            <form method="post" enctype="multipart/form-data" asp-page-handler="EditProfile">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="mb-3">
                    <label for="editDisplayName" class="form-label">Display Name</label>
                    <input class="form-control" id="editDisplayName" name="editModel.DisplayName" value="@Model.EditModel.DisplayName" />
                    <span asp-validation-for="EditModel.DisplayName" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label for="editBio" class="form-label">Bio</label>
                    <textarea class="form-control" id="editBio" name="editModel.Bio" rows="3">@Model.EditModel.Bio</textarea>
                    <span asp-validation-for="EditModel.Bio" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label for="editProfilePicture" class="form-label">Change Profile Picture</label>
                    <input type="file" class="form-control" id="editProfilePicture" name="editModel.ProfilePicture" />
                    <span asp-validation-for="EditModel.ProfilePicture" class="text-danger"></span>
                </div>

                <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
        </div>
    </div>

    <!-- CREATE POST FORM -->
    <div class="collapse @(showCreatePost ? "show" : "")" id="createPostForm">
        <div class="card card-body">
            <form method="post" enctype="multipart/form-data" asp-page-handler="CreatePost">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="mb-3">
                    <label for="newTitle" class="form-label">Title</label>
                    <input class="form-control" id="newTitle" name="newPost.Title" value="@Model.NewPost.Title" />
                    <span asp-validation-for="NewPost.Title" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label for="newContent" class="form-label">Content</label>
                    <textarea class="form-control" id="newContent" name="newPost.Content" rows="4">@Model.NewPost.Content</textarea>
                    <span asp-validation-for="NewPost.Content" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label for="imageFile" class="form-label">Upload Image</label>
                    <input type="file" class="form-control" id="imageFile" name="imageFile" accept="image/*" />
                    <small class="form-text text-muted">Choose an image file to upload with your post.</small>
                </div>

                <div class="mb-3">
                    <label class="form-label">Select Categories</label>
                    <div>
                        @foreach (var category in Model.AvailableCategories)
                        {
                            var isChecked = Model.NewPost.SelectedCategoryIds.Contains(category.Id) ? "checked" : "";
                            <div class="form-check form-check-inline">
                                <input type="checkbox"
                                       class="form-check-input"
                                       name="newPost.SelectedCategoryIds"
                                       value="@category.Id"
                                       id="cat_@category.Id"
                                @isChecked />
                                <label class="form-check-label" for="cat_@category.Id">@category.Name</label>
                            </div>
                        }
                    </div>
                </div>

                <button type="submit" class="btn btn-success">Submit Post</button>
            </form>
        </div>
    </div>

    <hr />
    <h4>Your Posts</h4>

    <div id="postsContainer">
        <!-- Posts will be loaded here dynamically -->
    </div>

    <div id="loadingIndicator" class="text-center my-3" style="display:none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
         window.antiForgeryToken = '@Antiforgery.GetAndStoreTokens(HttpContext).RequestToken';

        const postsContainer = document.getElementById("postsContainer");
        const loadingIndicator = document.getElementById("loadingIndicator");

        let page = 0;
        const pageSize = 5;
        let loading = false;
        let allLoaded = false;

        async function loadPosts() {
            if (loading || allLoaded) return;
            loading = true;
            loadingIndicator.style.display = "block";

            try {
                const response = await fetch(`?handler=LoadPosts&page=${page}&pageSize=${pageSize}`);
                if (!response.ok) {
                    console.error("Failed to load posts");
                    return;
                }
                const data = await response.json();

                if (data.posts.length === 0) {
                    allLoaded = true;
                } else {
                    data.posts.forEach(post => {
                        postsContainer.insertAdjacentHTML('beforeend', renderPostHtml(post));
                    });
                    page++;
                }
            } catch (error) {
                console.error("Error loading posts:", error);
            } finally {
                loading = false;
                loadingIndicator.style.display = "none";
            }
        }
                               function renderPostHtml(post) {
            const postCategories = post.postCategories || [];
            const comments = post.comments || [];
            const likes = post.likes || [];

            const categoriesHtml = postCategories.map(c => `<span class="badge bg-secondary me-1">${c.name ?? "Unknown"}</span>`).join('');

            const commentsCount = comments.length;
            const likesCount = likes.length;

            const latestComment = commentsCount > 0
                ? `<div class="mt-3 border-top pt-2">
                      <strong>Latest Comment:</strong>
                      <ul class="list-unstyled mb-0">
                        <li>
                          <strong>${comments[commentsCount - 1].user?.displayName ?? "Unknown"}:</strong>
                          ${comments[commentsCount - 1].content}
                        </li>
                      </ul>
                   </div>`
                : '';

            return `
            <div class="card w-100 mb-4">
                ${post.mainImageUrl ? `<img src="${post.mainImageUrl}" class="card-img-top" alt="Post Image" />` : ''}
                <div class="card-body">
                    <h5 class="card-title">${post.title}</h5>
                    <p class="card-text text-muted"><small>${new Date(post.createdAt).toLocaleString()}</small></p>
                    <div class="d-flex align-items-center text-muted small mb-2">
                        <span class="me-3">👍 ${likesCount}</span>
                        <span>💬 ${commentsCount}</span>
                    </div>
                    ${latestComment}
                    <button type="button" class="btn btn-link p-0 small" data-bs-toggle="modal" data-bs-target="#commentsModal_${post.id}">View all comments</button>
                    <p class="card-text mt-2">${post.content}</p>
                    ${categoriesHtml ? `<div><strong>Categories:</strong> ${categoriesHtml}</div>` : ''}
                    <div class="mt-3">
                        <form method="post" action="/Profile?handler=DeletePost" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this post?');">
                            <input type="hidden" name="__RequestVerificationToken" value="${window.antiForgeryToken}" />
                            <input type="hidden" name="id" value="${post.id}" />
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>

                        <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#editPostModal_${post.id}">Edit</button>
                    </div>
                </div>
            </div>

            <!-- Comments Modal -->
            <div class="modal fade" id="commentsModal_${post.id}" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Comments</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            ${commentsCount > 0
                                ? `<ul class="list-unstyled">
                                    ${comments.map(comment => `<li class="mb-2"><strong>${comment.user?.displayName ?? "Unknown"}:</strong> ${comment.content}</li>`).join('')}
                                </ul>`
                                : `<p class="text-muted">No comments yet.</p>`
                            }
                            <form method="post" asp-page-handler="AddComment" asp-route-postId="${post.id}" class="mt-3">
                                <div class="input-group">
                                    <input type="text" name="commentContent" class="form-control" placeholder="Write a comment..." required />
                                    <button class="btn btn-primary" type="submit">Post</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Modal -->
            <div class="modal fade" id="editPostModal_${post.id}" tabindex="-1" aria-labelledby="editPostModalLabel_${post.id}" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                      <form method="post" enctype="multipart/form-data" action="/Profile?handler=EditPost">
                            <input type="hidden" name="__RequestVerificationToken" value="${window.antiForgeryToken}" />
                            <input type="hidden" name="EditPostModel.Id" value="${post.id}" />

                            <div class="modal-header">
                                <h5 class="modal-title" id="editPostModalLabel_${post.id}">Edit Post</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label>Title</label>
                                    <input class="form-control" name="EditPostModel.Title" value="${post.title}" />
                                </div>
                                <div class="mb-3">
                                    <label>Content</label>
                                    <textarea class="form-control" name="EditPostModel.Content">${post.content}</textarea>
                                </div>
                                <div class="mb-3">
                                    <label>Update Image (optional)</label>
                                    <input type="file" name="EditPostModel.ImageFile" class="form-control" />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Save changes</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            `;
        }



        // Load first batch of posts on page load
        loadPosts();

        // Infinite scroll listener
        window.addEventListener("scroll", () => {
            if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 100) {
                loadPosts();
            }
        });
    </script>
}


